# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_pafprocess_mpi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_pafprocess_mpi')
    _pafprocess_mpi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pafprocess_mpi', [dirname(__file__)])
        except ImportError:
            import _pafprocess_mpi
            return _pafprocess_mpi
        try:
            _mod = imp.load_module('_pafprocess_mpi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _pafprocess_mpi = swig_import_helper()
    del swig_import_helper
else:
    import _pafprocess_mpi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class Peak(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Peak, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Peak, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pafprocess_mpi.Peak_x_set
    __swig_getmethods__["x"] = _pafprocess_mpi.Peak_x_get
    if _newclass:
        x = _swig_property(_pafprocess_mpi.Peak_x_get, _pafprocess_mpi.Peak_x_set)
    __swig_setmethods__["y"] = _pafprocess_mpi.Peak_y_set
    __swig_getmethods__["y"] = _pafprocess_mpi.Peak_y_get
    if _newclass:
        y = _swig_property(_pafprocess_mpi.Peak_y_get, _pafprocess_mpi.Peak_y_set)
    __swig_setmethods__["score"] = _pafprocess_mpi.Peak_score_set
    __swig_getmethods__["score"] = _pafprocess_mpi.Peak_score_get
    if _newclass:
        score = _swig_property(_pafprocess_mpi.Peak_score_get, _pafprocess_mpi.Peak_score_set)
    __swig_setmethods__["id"] = _pafprocess_mpi.Peak_id_set
    __swig_getmethods__["id"] = _pafprocess_mpi.Peak_id_get
    if _newclass:
        id = _swig_property(_pafprocess_mpi.Peak_id_get, _pafprocess_mpi.Peak_id_set)

    def __init__(self):
        this = _pafprocess_mpi.new_Peak()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pafprocess_mpi.delete_Peak
    __del__ = lambda self: None
Peak_swigregister = _pafprocess_mpi.Peak_swigregister
Peak_swigregister(Peak)
cvar = _pafprocess_mpi.cvar
THRESH_HEAT = cvar.THRESH_HEAT
THRESH_VECTOR_SCORE = cvar.THRESH_VECTOR_SCORE
THRESH_VECTOR_CNT1 = cvar.THRESH_VECTOR_CNT1
THRESH_PART_CNT = cvar.THRESH_PART_CNT
THRESH_HUMAN_SCORE = cvar.THRESH_HUMAN_SCORE
NUM_PART = cvar.NUM_PART
STEP_PAF = cvar.STEP_PAF
COCOPAIRS_SIZE = cvar.COCOPAIRS_SIZE
COCOPAIRS_NET = cvar.COCOPAIRS_NET
COCOPAIRS = cvar.COCOPAIRS

class VectorXY(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorXY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorXY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pafprocess_mpi.VectorXY_x_set
    __swig_getmethods__["x"] = _pafprocess_mpi.VectorXY_x_get
    if _newclass:
        x = _swig_property(_pafprocess_mpi.VectorXY_x_get, _pafprocess_mpi.VectorXY_x_set)
    __swig_setmethods__["y"] = _pafprocess_mpi.VectorXY_y_set
    __swig_getmethods__["y"] = _pafprocess_mpi.VectorXY_y_get
    if _newclass:
        y = _swig_property(_pafprocess_mpi.VectorXY_y_get, _pafprocess_mpi.VectorXY_y_set)

    def __init__(self):
        this = _pafprocess_mpi.new_VectorXY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pafprocess_mpi.delete_VectorXY
    __del__ = lambda self: None
VectorXY_swigregister = _pafprocess_mpi.VectorXY_swigregister
VectorXY_swigregister(VectorXY)

class ConnectionCandidate(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionCandidate, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionCandidate, name)
    __repr__ = _swig_repr
    __swig_setmethods__["idx1"] = _pafprocess_mpi.ConnectionCandidate_idx1_set
    __swig_getmethods__["idx1"] = _pafprocess_mpi.ConnectionCandidate_idx1_get
    if _newclass:
        idx1 = _swig_property(_pafprocess_mpi.ConnectionCandidate_idx1_get, _pafprocess_mpi.ConnectionCandidate_idx1_set)
    __swig_setmethods__["idx2"] = _pafprocess_mpi.ConnectionCandidate_idx2_set
    __swig_getmethods__["idx2"] = _pafprocess_mpi.ConnectionCandidate_idx2_get
    if _newclass:
        idx2 = _swig_property(_pafprocess_mpi.ConnectionCandidate_idx2_get, _pafprocess_mpi.ConnectionCandidate_idx2_set)
    __swig_setmethods__["score"] = _pafprocess_mpi.ConnectionCandidate_score_set
    __swig_getmethods__["score"] = _pafprocess_mpi.ConnectionCandidate_score_get
    if _newclass:
        score = _swig_property(_pafprocess_mpi.ConnectionCandidate_score_get, _pafprocess_mpi.ConnectionCandidate_score_set)
    __swig_setmethods__["etc"] = _pafprocess_mpi.ConnectionCandidate_etc_set
    __swig_getmethods__["etc"] = _pafprocess_mpi.ConnectionCandidate_etc_get
    if _newclass:
        etc = _swig_property(_pafprocess_mpi.ConnectionCandidate_etc_get, _pafprocess_mpi.ConnectionCandidate_etc_set)

    def __init__(self):
        this = _pafprocess_mpi.new_ConnectionCandidate()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pafprocess_mpi.delete_ConnectionCandidate
    __del__ = lambda self: None
ConnectionCandidate_swigregister = _pafprocess_mpi.ConnectionCandidate_swigregister
ConnectionCandidate_swigregister(ConnectionCandidate)

class Connection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Connection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Connection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cid1"] = _pafprocess_mpi.Connection_cid1_set
    __swig_getmethods__["cid1"] = _pafprocess_mpi.Connection_cid1_get
    if _newclass:
        cid1 = _swig_property(_pafprocess_mpi.Connection_cid1_get, _pafprocess_mpi.Connection_cid1_set)
    __swig_setmethods__["cid2"] = _pafprocess_mpi.Connection_cid2_set
    __swig_getmethods__["cid2"] = _pafprocess_mpi.Connection_cid2_get
    if _newclass:
        cid2 = _swig_property(_pafprocess_mpi.Connection_cid2_get, _pafprocess_mpi.Connection_cid2_set)
    __swig_setmethods__["score"] = _pafprocess_mpi.Connection_score_set
    __swig_getmethods__["score"] = _pafprocess_mpi.Connection_score_get
    if _newclass:
        score = _swig_property(_pafprocess_mpi.Connection_score_get, _pafprocess_mpi.Connection_score_set)
    __swig_setmethods__["peak_id1"] = _pafprocess_mpi.Connection_peak_id1_set
    __swig_getmethods__["peak_id1"] = _pafprocess_mpi.Connection_peak_id1_get
    if _newclass:
        peak_id1 = _swig_property(_pafprocess_mpi.Connection_peak_id1_get, _pafprocess_mpi.Connection_peak_id1_set)
    __swig_setmethods__["peak_id2"] = _pafprocess_mpi.Connection_peak_id2_set
    __swig_getmethods__["peak_id2"] = _pafprocess_mpi.Connection_peak_id2_get
    if _newclass:
        peak_id2 = _swig_property(_pafprocess_mpi.Connection_peak_id2_get, _pafprocess_mpi.Connection_peak_id2_set)

    def __init__(self):
        this = _pafprocess_mpi.new_Connection()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _pafprocess_mpi.delete_Connection
    __del__ = lambda self: None
Connection_swigregister = _pafprocess_mpi.Connection_swigregister
Connection_swigregister(Connection)


def process_paf(p1, h1, f1):
    return _pafprocess_mpi.process_paf(p1, h1, f1)
process_paf = _pafprocess_mpi.process_paf

def get_num_humans():
    return _pafprocess_mpi.get_num_humans()
get_num_humans = _pafprocess_mpi.get_num_humans

def get_part_cid(human_id, part_id):
    return _pafprocess_mpi.get_part_cid(human_id, part_id)
get_part_cid = _pafprocess_mpi.get_part_cid

def get_score(human_id):
    return _pafprocess_mpi.get_score(human_id)
get_score = _pafprocess_mpi.get_score

def get_part_x(cid):
    return _pafprocess_mpi.get_part_x(cid)
get_part_x = _pafprocess_mpi.get_part_x

def get_part_y(cid):
    return _pafprocess_mpi.get_part_y(cid)
get_part_y = _pafprocess_mpi.get_part_y

def get_part_score(cid):
    return _pafprocess_mpi.get_part_score(cid)
get_part_score = _pafprocess_mpi.get_part_score
# This file is compatible with both classic and new-style classes.


